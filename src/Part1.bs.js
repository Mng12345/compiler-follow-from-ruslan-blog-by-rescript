// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var ReadlineSync = require("./ReadlineSync.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var NotToken = /* @__PURE__ */Caml_exceptions.create("Part1.Token.NotToken");

var Token = {
  NotToken: NotToken
};

var WrongExpression = /* @__PURE__ */Caml_exceptions.create("Part1.Interpreter.WrongExpression");

function make(text) {
  return {
          text: text,
          pos: 0,
          currentToken: /* Eof */1
        };
}

function getNextToken(interpreter) {
  if (interpreter.pos > (interpreter.text.length - 1 | 0)) {
    return /* Eof */1;
  }
  var $$char = interpreter.text.charAt(interpreter.pos);
  switch ($$char) {
    case "+" :
        interpreter.pos = interpreter.pos + 1 | 0;
        return /* Plus */0;
    case "0" :
    case "1" :
    case "2" :
    case "3" :
    case "4" :
    case "5" :
    case "6" :
    case "7" :
    case "8" :
    case "9" :
        break;
    default:
      throw {
            RE_EXN_ID: NotToken,
            Error: new Error()
          };
  }
  interpreter.pos = interpreter.pos + 1 | 0;
  return /* Integer */{
          _0: Belt_Int.fromString($$char)
        };
}

function expr(interpreter) {
  var left = getNextToken(interpreter);
  var plus = getNextToken(interpreter);
  var right = getNextToken(interpreter);
  var end = getNextToken(interpreter);
  if (typeof left === "number") {
    throw {
          RE_EXN_ID: WrongExpression,
          Error: new Error()
        };
  }
  if (plus === 0) {
    if (typeof right === "number") {
      throw {
            RE_EXN_ID: WrongExpression,
            Error: new Error()
          };
    }
    if (typeof end === "number") {
      if (end !== 0) {
        return left._0 + right._0 | 0;
      }
      throw {
            RE_EXN_ID: WrongExpression,
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: WrongExpression,
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: WrongExpression,
        Error: new Error()
      };
}

var Interpreter = {
  WrongExpression: WrongExpression,
  make: make,
  getNextToken: getNextToken,
  expr: expr
};

function main(param) {
  while(true) {
    try {
      var text = ReadlineSync.question("calc>");
      var interpreter = make(text);
      var value = expr(interpreter);
      console.log(value);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      console.log("error: ", exn);
    }
  };
  
}

main(undefined);

exports.Token = Token;
exports.Interpreter = Interpreter;
exports.main = main;
/*  Not a pure module */
